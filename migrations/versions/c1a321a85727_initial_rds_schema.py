"""Initial RDS schema

Revision ID: c1a321a85727
Revises: 
Create Date: 2025-08-24 14:40:36.693344

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'c1a321a85727'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('analyst_availability',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('analyst_id', sa.Integer(), nullable=False),
    sa.Column('weekday', sa.Integer(), nullable=False),
    sa.Column('start_minute', sa.Integer(), nullable=False),
    sa.Column('end_minute', sa.Integer(), nullable=False),
    sa.Column('slot_minutes', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('analyst_availability', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_analyst_availability_analyst_id'), ['analyst_id'], unique=False)

    op.create_table('analyst_connect_profiles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('analyst_id', sa.Integer(), nullable=False),
    sa.Column('is_enabled', sa.Boolean(), nullable=True),
    sa.Column('headline', sa.String(length=120), nullable=True),
    sa.Column('bio_short', sa.String(length=500), nullable=True),
    sa.Column('specialties', sa.Text(), nullable=True),
    sa.Column('hourly_rate', sa.Float(), nullable=True),
    sa.Column('auto_confirm', sa.Boolean(), nullable=True),
    sa.Column('max_daily_sessions', sa.Integer(), nullable=True),
    sa.Column('video_provider', sa.String(length=30), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('analyst_connect_profiles', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_analyst_connect_profiles_analyst_id'), ['analyst_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_analyst_connect_profiles_is_enabled'), ['is_enabled'], unique=False)

    op.create_table('analyst_skill_summary',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('analyst_name', sa.String(length=100), nullable=False),
    sa.Column('total_skills_completed', sa.Integer(), nullable=True),
    sa.Column('python_skills', sa.Integer(), nullable=True),
    sa.Column('sql_skills', sa.Integer(), nullable=True),
    sa.Column('ai_ml_skills', sa.Integer(), nullable=True),
    sa.Column('avg_rating', sa.Float(), nullable=True),
    sa.Column('last_activity', sa.DateTime(), nullable=True),
    sa.Column('skill_level', sa.String(length=20), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('analyst_name')
    )
    op.create_table('analyst_time_off',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('analyst_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('reason', sa.String(length=200), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('analyst_time_off', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_analyst_time_off_analyst_id'), ['analyst_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_analyst_time_off_date'), ['date'], unique=False)

    op.create_table('async_run_history',
    sa.Column('id', sa.String(length=60), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('finished_at', sa.DateTime(), nullable=True),
    sa.Column('returncode', sa.Integer(), nullable=True),
    sa.Column('error', sa.Text(), nullable=True),
    sa.Column('output_trunc', sa.Text(), nullable=True),
    sa.Column('progress_percent', sa.Integer(), nullable=True),
    sa.Column('user_key', sa.String(length=120), nullable=True),
    sa.Column('code_hash', sa.String(length=64), nullable=True),
    sa.Column('duration_secs', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('async_run_history', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_async_run_history_code_hash'), ['code_hash'], unique=False)
        batch_op.create_index(batch_op.f('ix_async_run_history_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_async_run_history_user_key'), ['user_key'], unique=False)

    op.create_table('certificate_requests',
    sa.Column('id', sa.String(length=32), nullable=False),
    sa.Column('analyst_name', sa.String(length=100), nullable=False),
    sa.Column('analyst_email', sa.String(length=120), nullable=False),
    sa.Column('internship_start_date', sa.Date(), nullable=False),
    sa.Column('internship_end_date', sa.Date(), nullable=False),
    sa.Column('requested_issue_date', sa.Date(), nullable=False),
    sa.Column('request_message', sa.Text(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('admin_notes', sa.Text(), nullable=True),
    sa.Column('performance_score', sa.Float(), nullable=True),
    sa.Column('approved_by', sa.String(length=100), nullable=True),
    sa.Column('approved_at', sa.DateTime(), nullable=True),
    sa.Column('certificate_generated', sa.Boolean(), nullable=True),
    sa.Column('certificate_unique_id', sa.String(length=50), nullable=True),
    sa.Column('certificate_file_path', sa.String(length=255), nullable=True),
    sa.Column('requested_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('certificate_unique_id')
    )
    op.create_table('certificate_templates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('template_name', sa.String(length=100), nullable=False),
    sa.Column('template_type', sa.String(length=50), nullable=True),
    sa.Column('title', sa.String(length=200), nullable=True),
    sa.Column('subtitle', sa.String(length=200), nullable=True),
    sa.Column('description_template', sa.Text(), nullable=True),
    sa.Column('logo_path', sa.String(length=255), nullable=True),
    sa.Column('badge_path', sa.String(length=255), nullable=True),
    sa.Column('signature1_path', sa.String(length=255), nullable=True),
    sa.Column('signature2_path', sa.String(length=255), nullable=True),
    sa.Column('footer_path', sa.String(length=255), nullable=True),
    sa.Column('signature1_name', sa.String(length=100), nullable=True),
    sa.Column('signature1_title', sa.String(length=100), nullable=True),
    sa.Column('signature2_name', sa.String(length=100), nullable=True),
    sa.Column('signature2_title', sa.String(length=100), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('chat_sessions',
    sa.Column('id', sa.String(length=32), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('model', sa.String(length=120), nullable=True),
    sa.Column('user_key', sa.String(length=120), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('chat_sessions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_chat_sessions_user_key'), ['user_key'], unique=False)

    # Create code_artifacts first (without FK to code_artifact_versions to avoid cyclic dependency on creation)
    op.create_table('code_artifacts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('slug', sa.String(length=120), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('author', sa.String(length=100), nullable=True),
    sa.Column('visibility', sa.String(length=20), nullable=True),
    sa.Column('language', sa.String(length=30), nullable=True),
    sa.Column('current_version_id', sa.Integer(), nullable=True),
    sa.Column('stars', sa.Integer(), nullable=True),
    sa.Column('views', sa.Integer(), nullable=True),
    sa.Column('run_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('allow_investor_runs', sa.Boolean(), nullable=True),
    sa.Column('allow_forks', sa.Boolean(), nullable=True),
    sa.Column('tags', sa.String(length=300), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('slug')
    )
    with op.batch_alter_table('code_artifacts', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_code_artifacts_author'), ['author'], unique=False)

    # Now create code_artifact_versions (FK to code_artifacts is valid now)
    op.create_table('code_artifact_versions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('artifact_id', sa.Integer(), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('code', sa.Text(), nullable=False),
    sa.Column('changelog', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.String(length=100), nullable=True),
    sa.Column('checksum', sa.String(length=64), nullable=True),
    sa.ForeignKeyConstraint(['artifact_id'], ['code_artifacts.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('artifact_id', 'version', name='uix_artifact_version')
    )
    with op.batch_alter_table('code_artifact_versions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_code_artifact_versions_artifact_id'), ['artifact_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_code_artifact_versions_checksum'), ['checksum'], unique=False)

    # Finally add FK from code_artifacts.current_version_id to code_artifact_versions.id after both tables exist
    op.create_foreign_key('fk_code_artifacts_current_version', 'code_artifacts', 'code_artifact_versions', ['current_version_id'], ['id'])

    op.create_table('google_calendar_tokens',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('analyst_id', sa.Integer(), nullable=False),
    sa.Column('access_token', sa.Text(), nullable=True),
    sa.Column('refresh_token', sa.Text(), nullable=True),
    sa.Column('token_expiry', sa.DateTime(), nullable=True),
    sa.Column('scope', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('google_calendar_tokens', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_google_calendar_tokens_analyst_id'), ['analyst_id'], unique=True)

    op.create_table('investor_imported_portfolios',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('investor_id', sa.String(length=32), nullable=False),
    sa.Column('account_source', sa.String(length=50), nullable=False),
    sa.Column('account_label', sa.String(length=120), nullable=False),
    sa.Column('import_date', sa.DateTime(), nullable=True),
    sa.Column('raw_payload', sa.Text(), nullable=True),
    sa.Column('holdings_json', sa.Text(), nullable=True),
    sa.Column('checksum', sa.String(length=64), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('note', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('investor_imported_portfolios', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_investor_imported_portfolios_checksum'), ['checksum'], unique=False)
        batch_op.create_index(batch_op.f('ix_investor_imported_portfolios_import_date'), ['import_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_investor_imported_portfolios_investor_id'), ['investor_id'], unique=False)

    op.create_table('investor_portfolio_stock',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('investor_id', sa.String(length=32), nullable=False),
    sa.Column('ticker', sa.String(length=20), nullable=False),
    sa.Column('company_name', sa.String(length=100), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('buy_price', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('investor_registration',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('email', sa.String(length=200), nullable=False),
    sa.Column('mobile', sa.String(length=15), nullable=False),
    sa.Column('pan_number', sa.String(length=10), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('pan_verified', sa.Boolean(), nullable=True),
    sa.Column('verification_document', sa.String(length=500), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('admin_notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('processed_at', sa.DateTime(), nullable=True),
    sa.Column('processed_by', sa.String(length=100), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('investor_trading_api_connections',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('investor_id', sa.String(length=32), nullable=False),
    sa.Column('provider', sa.String(length=50), nullable=False),
    sa.Column('account_label', sa.String(length=120), nullable=False),
    sa.Column('api_key_masked', sa.String(length=120), nullable=True),
    sa.Column('api_secret_masked', sa.String(length=120), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_validated_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('investor_trading_api_connections', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_investor_trading_api_connections_investor_id'), ['investor_id'], unique=False)

    op.create_table('market_scenarios',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('scenario_name', sa.String(length=200), nullable=False),
    sa.Column('scenario_type', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('start_date', sa.String(length=20), nullable=True),
    sa.Column('end_date', sa.String(length=20), nullable=True),
    sa.Column('duration_months', sa.Integer(), nullable=True),
    sa.Column('market_impact', sa.Text(), nullable=True),
    sa.Column('asset_class_impact', sa.Text(), nullable=True),
    sa.Column('risk_profiles', sa.Text(), nullable=True),
    sa.Column('recovery_months', sa.Integer(), nullable=True),
    sa.Column('recovery_insight', sa.Text(), nullable=True),
    sa.Column('recommendations', sa.Text(), nullable=True),
    sa.Column('created_by', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ml_model_results',
    sa.Column('id', sa.String(length=32), nullable=False),
    sa.Column('model_name', sa.String(length=100), nullable=False),
    sa.Column('model_version', sa.String(length=20), nullable=True),
    sa.Column('stock_symbols', sa.Text(), nullable=True),
    sa.Column('stock_category', sa.String(length=100), nullable=True),
    sa.Column('min_confidence', sa.Integer(), nullable=True),
    sa.Column('btst_min_score', sa.Integer(), nullable=True),
    sa.Column('total_analyzed', sa.Integer(), nullable=True),
    sa.Column('actionable_count', sa.Integer(), nullable=True),
    sa.Column('avg_confidence', sa.Float(), nullable=True),
    sa.Column('avg_btst_score', sa.Float(), nullable=True),
    sa.Column('results', sa.Text(), nullable=True),
    sa.Column('actionable_results', sa.Text(), nullable=True),
    sa.Column('summary', sa.Text(), nullable=True),
    sa.Column('execution_time_seconds', sa.Float(), nullable=True),
    sa.Column('model_scores', sa.Text(), nullable=True),
    sa.Column('api_endpoint', sa.String(length=200), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('run_by', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('portfolio_analysis_limit',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('investor_id', sa.String(length=32), nullable=False),
    sa.Column('last_analysis_time', sa.DateTime(), nullable=True),
    sa.Column('analysis_count_today', sa.Integer(), nullable=True),
    sa.Column('date', sa.Date(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('portfolio_stress_testing',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('investor_id', sa.String(length=32), nullable=False),
    sa.Column('portfolio_name', sa.String(length=200), nullable=True),
    sa.Column('risk_profile', sa.String(length=50), nullable=True),
    sa.Column('portfolio_allocation', sa.Text(), nullable=True),
    sa.Column('sector_exposure', sa.Text(), nullable=True),
    sa.Column('test_scenarios', sa.Text(), nullable=True),
    sa.Column('worst_case_loss', sa.Float(), nullable=True),
    sa.Column('expected_loss_95', sa.Float(), nullable=True),
    sa.Column('time_to_recovery', sa.Integer(), nullable=True),
    sa.Column('risk_mitigation_strategies', sa.Text(), nullable=True),
    sa.Column('rebalancing_suggestions', sa.Text(), nullable=True),
    sa.Column('hedging_strategies', sa.Text(), nullable=True),
    sa.Column('test_date', sa.DateTime(), nullable=True),
    sa.Column('analyst_prepared_by', sa.String(length=100), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('published_models',
    sa.Column('id', sa.String(length=40), nullable=False),
    sa.Column('name', sa.String(length=140), nullable=False),
    sa.Column('version', sa.String(length=40), nullable=False),
    sa.Column('author_user_key', sa.String(length=80), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('readme_md', sa.Text(), nullable=True),
    sa.Column('artifact_path', sa.String(length=400), nullable=False),
    sa.Column('allowed_functions', sa.Text(), nullable=True),
    sa.Column('visibility', sa.String(length=20), nullable=True),
    sa.Column('editors', sa.Text(), nullable=True),
    sa.Column('hash_sha256', sa.String(length=64), nullable=True),
    sa.Column('run_count', sa.Integer(), nullable=True),
    sa.Column('editable_functions', sa.Text(), nullable=True),
    sa.Column('category', sa.String(length=50), nullable=True),
    sa.Column('last_change_summary', sa.Text(), nullable=True),
    sa.Column('last_change_at', sa.DateTime(), nullable=True),
    sa.Column('subscriber_count', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('published_models', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_published_models_author_user_key'), ['author_user_key'], unique=False)
        batch_op.create_index(batch_op.f('ix_published_models_category'), ['category'], unique=False)
        batch_op.create_index(batch_op.f('ix_published_models_name'), ['name'], unique=False)

    op.create_table('saved_scripts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('script_name', sa.String(length=255), nullable=False),
    sa.Column('program_name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('script_content', sa.Text(), nullable=False),
    sa.Column('saved_by', sa.String(length=100), nullable=False),
    sa.Column('category', sa.String(length=100), nullable=True),
    sa.Column('tags', sa.Text(), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('usage_count', sa.Integer(), nullable=True),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.Column('last_used_date', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('script_executions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('script_name', sa.String(length=255), nullable=False),
    sa.Column('program_name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('run_by', sa.String(length=100), nullable=False),
    sa.Column('output', sa.Text(), nullable=False),
    sa.Column('error_output', sa.Text(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('execution_time', sa.Float(), nullable=True),
    sa.Column('duration_ms', sa.Integer(), nullable=True),
    sa.Column('json_output', sa.Text(), nullable=True),
    sa.Column('is_json_result', sa.Boolean(), nullable=True),
    sa.Column('recommendation', sa.String(length=50), nullable=True),
    sa.Column('actual_result', sa.String(length=50), nullable=True),
    sa.Column('script_file_path', sa.String(length=500), nullable=True),
    sa.Column('script_size', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('date_created', sa.Date(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('session_bookings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('investor_id', sa.String(length=32), nullable=False),
    sa.Column('analyst_id', sa.Integer(), nullable=False),
    sa.Column('start_utc', sa.DateTime(), nullable=False),
    sa.Column('end_utc', sa.DateTime(), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('price_quote', sa.Float(), nullable=True),
    sa.Column('video_join_url', sa.String(length=500), nullable=True),
    sa.Column('video_host_url', sa.String(length=500), nullable=True),
    sa.Column('provider_meeting_id', sa.String(length=120), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('video_recording_url', sa.String(length=500), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('analyst_id', 'start_utc', 'end_utc', name='uq_session_slot')
    )
    with op.batch_alter_table('session_bookings', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_session_bookings_analyst_id'), ['analyst_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_session_bookings_end_utc'), ['end_utc'], unique=False)
        batch_op.create_index(batch_op.f('ix_session_bookings_investor_id'), ['investor_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_session_bookings_start_utc'), ['start_utc'], unique=False)
        batch_op.create_index(batch_op.f('ix_session_bookings_status'), ['status'], unique=False)

    op.create_table('skill_completions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('analyst_name', sa.String(length=100), nullable=False),
    sa.Column('report_id', sa.String(length=32), nullable=False),
    sa.Column('skill_category', sa.String(length=50), nullable=False),
    sa.Column('skill_title', sa.String(length=200), nullable=False),
    sa.Column('analysis_type', sa.String(length=100), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('rating', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('analyst_name', 'report_id', 'skill_category', 'analysis_type')
    )
    op.create_table('stock_categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('category_name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('stock_symbols', sa.Text(), nullable=True),
    sa.Column('stock_count', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('category_name')
    )
    op.create_table('stock_price_history',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('stock_symbol', sa.String(length=20), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('open_price', sa.Float(), nullable=True),
    sa.Column('high_price', sa.Float(), nullable=True),
    sa.Column('low_price', sa.Float(), nullable=True),
    sa.Column('close_price', sa.Float(), nullable=True),
    sa.Column('volume', sa.BigInteger(), nullable=True),
    sa.Column('adjusted_close', sa.Float(), nullable=True),
    sa.Column('market_cap', sa.Float(), nullable=True),
    sa.Column('pe_ratio', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('stock_symbol', 'date', name='uix_stock_date')
    )
    with op.batch_alter_table('stock_price_history', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_stock_price_history_date'), ['date'], unique=False)
        batch_op.create_index(batch_op.f('ix_stock_price_history_stock_symbol'), ['stock_symbol'], unique=False)

    op.create_table('support_tickets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_type', sa.String(length=20), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('subject', sa.String(length=200), nullable=False),
    sa.Column('category', sa.String(length=50), nullable=True),
    sa.Column('priority', sa.String(length=20), nullable=True),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('admin_response', sa.Text(), nullable=True),
    sa.Column('is_complaint', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('last_status_email_sent_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('support_tickets', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_support_tickets_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_support_tickets_user_id'), ['user_id'], unique=False)

    op.create_table('btst_analysis_results',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ml_result_id', sa.String(length=32), nullable=False),
    sa.Column('symbol', sa.String(length=20), nullable=False),
    sa.Column('current_price', sa.Float(), nullable=True),
    sa.Column('change_percent', sa.Float(), nullable=True),
    sa.Column('open_price', sa.Float(), nullable=True),
    sa.Column('high_price', sa.Float(), nullable=True),
    sa.Column('low_price', sa.Float(), nullable=True),
    sa.Column('volume', sa.String(length=50), nullable=True),
    sa.Column('rsi_14', sa.Float(), nullable=True),
    sa.Column('macd', sa.Float(), nullable=True),
    sa.Column('bollinger_bands', sa.String(length=50), nullable=True),
    sa.Column('atr', sa.Float(), nullable=True),
    sa.Column('tsi', sa.Float(), nullable=True),
    sa.Column('candlestick', sa.String(length=100), nullable=True),
    sa.Column('support_resistance', sa.String(length=100), nullable=True),
    sa.Column('btst_score', sa.Integer(), nullable=True),
    sa.Column('price_change_percent', sa.Float(), nullable=True),
    sa.Column('close_near_high_percent', sa.Float(), nullable=True),
    sa.Column('volume_spike', sa.Float(), nullable=True),
    sa.Column('recommendation', sa.String(length=20), nullable=True),
    sa.Column('confidence_percent', sa.Integer(), nullable=True),
    sa.Column('stop_loss', sa.Float(), nullable=True),
    sa.Column('target', sa.Float(), nullable=True),
    sa.Column('risk_reward_ratio', sa.Float(), nullable=True),
    sa.Column('primary_condition', sa.String(length=100), nullable=True),
    sa.Column('models_used', sa.Text(), nullable=True),
    sa.Column('last_updated', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['ml_result_id'], ['ml_model_results.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('chat_messages',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('session_id', sa.String(length=32), nullable=True),
    sa.Column('role', sa.String(length=10), nullable=True),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['chat_sessions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('chat_messages', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_chat_messages_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_chat_messages_session_id'), ['session_id'], unique=False)

    op.create_table('code_artifact_activity',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('artifact_id', sa.Integer(), nullable=False),
    sa.Column('action', sa.String(length=50), nullable=True),
    sa.Column('actor', sa.String(length=100), nullable=True),
    sa.Column('meta', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['artifact_id'], ['code_artifacts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('code_artifact_activity', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_code_artifact_activity_action'), ['action'], unique=False)
        batch_op.create_index(batch_op.f('ix_code_artifact_activity_actor'), ['actor'], unique=False)
        batch_op.create_index(batch_op.f('ix_code_artifact_activity_artifact_id'), ['artifact_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_code_artifact_activity_created_at'), ['created_at'], unique=False)

    op.create_table('code_artifact_permissions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('artifact_id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=True),
    sa.Column('can_view', sa.Boolean(), nullable=True),
    sa.Column('can_run', sa.Boolean(), nullable=True),
    sa.Column('can_edit', sa.Boolean(), nullable=True),
    sa.Column('can_admin', sa.Boolean(), nullable=True),
    sa.Column('granted_by', sa.String(length=100), nullable=True),
    sa.Column('granted_at', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['artifact_id'], ['code_artifacts.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('artifact_id', 'username', name='uix_artifact_user')
    )
    with op.batch_alter_table('code_artifact_permissions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_code_artifact_permissions_username'), ['username'], unique=False)

    op.create_table('code_artifact_stars',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('artifact_id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=True),
    sa.Column('starred_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['artifact_id'], ['code_artifacts.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('artifact_id', 'username', name='uix_artifact_star')
    )
    with op.batch_alter_table('code_artifact_stars', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_code_artifact_stars_username'), ['username'], unique=False)

    op.create_table('code_run_requests',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('artifact_id', sa.Integer(), nullable=False),
    sa.Column('requester', sa.String(length=100), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('params_json', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('decided_at', sa.DateTime(), nullable=True),
    sa.Column('decided_by', sa.String(length=100), nullable=True),
    sa.Column('execution_output', sa.Text(), nullable=True),
    sa.Column('execution_error', sa.Text(), nullable=True),
    sa.Column('run_started_at', sa.DateTime(), nullable=True),
    sa.Column('run_finished_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['artifact_id'], ['code_artifacts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('code_run_requests', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_code_run_requests_requester'), ['requester'], unique=False)

    op.create_table('edit_access_requests',
    sa.Column('id', sa.String(length=40), nullable=False),
    sa.Column('published_model_id', sa.String(length=40), nullable=False),
    sa.Column('requester_user_key', sa.String(length=80), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('reason', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('decided_at', sa.DateTime(), nullable=True),
    sa.Column('decided_by_user_key', sa.String(length=80), nullable=True),
    sa.ForeignKeyConstraint(['published_model_id'], ['published_models.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('edit_access_requests', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_edit_access_requests_published_model_id'), ['published_model_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_edit_access_requests_requester_user_key'), ['requester_user_key'], unique=False)

    op.create_table('investor_imported_portfolio_holdings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('imported_portfolio_id', sa.Integer(), nullable=True),
    sa.Column('ticker', sa.String(length=30), nullable=True),
    sa.Column('company_name', sa.String(length=120), nullable=True),
    sa.Column('quantity', sa.Float(), nullable=True),
    sa.Column('avg_price', sa.Float(), nullable=True),
    sa.Column('current_price', sa.Float(), nullable=True),
    sa.Column('value_local', sa.Float(), nullable=True),
    sa.Column('weight_pct', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['imported_portfolio_id'], ['investor_imported_portfolios.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('investor_imported_portfolio_holdings', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_investor_imported_portfolio_holdings_imported_portfolio_id'), ['imported_portfolio_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_investor_imported_portfolio_holdings_ticker'), ['ticker'], unique=False)

    op.create_table('investor_model_profiles',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('investor_id', sa.String(length=32), nullable=False),
    sa.Column('published_model_id', sa.String(length=40), nullable=False),
    sa.Column('run_count', sa.Integer(), nullable=True),
    sa.Column('last_run_at', sa.DateTime(), nullable=True),
    sa.Column('last_output_preview', sa.Text(), nullable=True),
    sa.Column('last_analysis_summary', sa.Text(), nullable=True),
    sa.Column('last_analysis_sig', sa.String(length=64), nullable=True),
    sa.ForeignKeyConstraint(['investor_id'], ['investor_account.id'], ),
    sa.ForeignKeyConstraint(['published_model_id'], ['published_models.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('investor_id', 'published_model_id', name='uix_profile_investor_model')
    )
    with op.batch_alter_table('investor_model_profiles', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_investor_model_profiles_investor_id'), ['investor_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_investor_model_profiles_published_model_id'), ['published_model_id'], unique=False)

    op.create_table('investor_risk_profile',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('investor_id', sa.String(length=32), nullable=False),
    sa.Column('score', sa.Integer(), nullable=True),
    sa.Column('category', sa.String(length=50), nullable=True),
    sa.Column('answers_json', sa.Text(), nullable=True),
    sa.Column('completed', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['investor_id'], ['investor_account.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('investor_risk_profile', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_investor_risk_profile_investor_id'), ['investor_id'], unique=False)

    op.create_table('model_performance_metrics',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('published_model_id', sa.String(length=40), nullable=False),
    sa.Column('period', sa.String(length=20), nullable=False),
    sa.Column('total_recommendations', sa.Integer(), nullable=True),
    sa.Column('active_positions', sa.Integer(), nullable=True),
    sa.Column('closed_positions', sa.Integer(), nullable=True),
    sa.Column('total_return', sa.Float(), nullable=True),
    sa.Column('average_return', sa.Float(), nullable=True),
    sa.Column('median_return', sa.Float(), nullable=True),
    sa.Column('best_return', sa.Float(), nullable=True),
    sa.Column('worst_return', sa.Float(), nullable=True),
    sa.Column('winning_trades', sa.Integer(), nullable=True),
    sa.Column('losing_trades', sa.Integer(), nullable=True),
    sa.Column('win_rate', sa.Float(), nullable=True),
    sa.Column('volatility', sa.Float(), nullable=True),
    sa.Column('max_drawdown', sa.Float(), nullable=True),
    sa.Column('sharpe_ratio', sa.Float(), nullable=True),
    sa.Column('sortino_ratio', sa.Float(), nullable=True),
    sa.Column('portfolio_value', sa.Float(), nullable=True),
    sa.Column('benchmark_return', sa.Float(), nullable=True),
    sa.Column('alpha', sa.Float(), nullable=True),
    sa.Column('beta', sa.Float(), nullable=True),
    sa.Column('calculation_date', sa.Date(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['published_model_id'], ['published_models.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('published_model_id', 'period', 'calculation_date', name='uix_model_period_date')
    )
    with op.batch_alter_table('model_performance_metrics', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_model_performance_metrics_calculation_date'), ['calculation_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_model_performance_metrics_published_model_id'), ['published_model_id'], unique=False)

    op.create_table('option_chain_snapshots',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_key', sa.String(length=100), nullable=False),
    sa.Column('investor_id', sa.String(length=32), nullable=True),
    sa.Column('asset_key', sa.String(length=20), nullable=False),
    sa.Column('expiry', sa.String(length=20), nullable=False),
    sa.Column('strategy_chain_type', sa.String(length=50), nullable=False),
    sa.Column('metrics_json', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('date', sa.Date(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['investor_id'], ['investor_account.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('option_chain_snapshots', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_option_chain_snapshots_date'), ['date'], unique=False)

    op.create_table('options_call_recommendations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_key', sa.String(length=100), nullable=False),
    sa.Column('investor_id', sa.String(length=32), nullable=True),
    sa.Column('asset_key', sa.String(length=50), nullable=False),
    sa.Column('expiry', sa.String(length=20), nullable=False),
    sa.Column('strike', sa.Float(), nullable=False),
    sa.Column('call_ltp', sa.Float(), nullable=True),
    sa.Column('call_iv', sa.Float(), nullable=True),
    sa.Column('call_delta', sa.Float(), nullable=True),
    sa.Column('call_gamma', sa.Float(), nullable=True),
    sa.Column('call_theta', sa.Float(), nullable=True),
    sa.Column('call_vega', sa.Float(), nullable=True),
    sa.Column('call_volume', sa.Integer(), nullable=True),
    sa.Column('call_oi', sa.Integer(), nullable=True),
    sa.Column('underlying_price', sa.Float(), nullable=True),
    sa.Column('confidence', sa.Float(), nullable=True),
    sa.Column('rationale_json', sa.Text(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['investor_id'], ['investor_account.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('options_call_recommendations', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_options_call_recommendations_user_key'), ['user_key'], unique=False)

    op.create_table('published_model_change_alerts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('investor_id', sa.String(length=32), nullable=False),
    sa.Column('published_model_id', sa.String(length=40), nullable=False),
    sa.Column('alert_type', sa.String(length=40), nullable=True),
    sa.Column('threshold', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['investor_id'], ['investor_account.id'], ),
    sa.ForeignKeyConstraint(['published_model_id'], ['published_models.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('investor_id', 'published_model_id', 'alert_type', name='uix_alert_investor_model_type')
    )
    with op.batch_alter_table('published_model_change_alerts', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_published_model_change_alerts_investor_id'), ['investor_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_published_model_change_alerts_published_model_id'), ['published_model_id'], unique=False)

    op.create_table('published_model_run_history',
    sa.Column('id', sa.String(length=60), nullable=False),
    sa.Column('investor_id', sa.String(length=32), nullable=True),
    sa.Column('published_model_id', sa.String(length=40), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('inputs_json', sa.Text(), nullable=True),
    sa.Column('output_text', sa.Text(), nullable=True),
    sa.Column('error_text', sa.Text(), nullable=True),
    sa.Column('duration_ms', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['investor_id'], ['investor_account.id'], ),
    sa.ForeignKeyConstraint(['published_model_id'], ['published_models.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('published_model_run_history', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_published_model_run_history_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_published_model_run_history_investor_id'), ['investor_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_published_model_run_history_published_model_id'), ['published_model_id'], unique=False)

    op.create_table('published_model_subscriptions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('investor_id', sa.String(length=32), nullable=False),
    sa.Column('published_model_id', sa.String(length=40), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['investor_id'], ['investor_account.id'], ),
    sa.ForeignKeyConstraint(['published_model_id'], ['published_models.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('investor_id', 'published_model_id', name='uix_investor_model_subscription')
    )
    with op.batch_alter_table('published_model_subscriptions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_published_model_subscriptions_investor_id'), ['investor_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_published_model_subscriptions_published_model_id'), ['published_model_id'], unique=False)

    op.create_table('published_model_watchlist',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('investor_id', sa.String(length=32), nullable=False),
    sa.Column('published_model_id', sa.String(length=40), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['investor_id'], ['investor_account.id'], ),
    sa.ForeignKeyConstraint(['published_model_id'], ['published_models.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('investor_id', 'published_model_id', name='uix_watchlist_investor_model')
    )
    with op.batch_alter_table('published_model_watchlist', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_published_model_watchlist_investor_id'), ['investor_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_published_model_watchlist_published_model_id'), ['published_model_id'], unique=False)

    op.create_table('report_backtesting',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('report_id', sa.String(length=32), nullable=False),
    sa.Column('scenario_id', sa.Integer(), nullable=True),
    sa.Column('analyst', sa.String(length=100), nullable=False),
    sa.Column('report_type', sa.String(length=50), nullable=True),
    sa.Column('backtest_period_start', sa.String(length=20), nullable=True),
    sa.Column('backtest_period_end', sa.String(length=20), nullable=True),
    sa.Column('tickers_analyzed', sa.Text(), nullable=True),
    sa.Column('overall_score', sa.Float(), nullable=True),
    sa.Column('accuracy_score', sa.Float(), nullable=True),
    sa.Column('timing_score', sa.Float(), nullable=True),
    sa.Column('risk_assessment_score', sa.Float(), nullable=True),
    sa.Column('portfolio_return', sa.Float(), nullable=True),
    sa.Column('benchmark_return', sa.Float(), nullable=True),
    sa.Column('alpha_generated', sa.Float(), nullable=True),
    sa.Column('max_drawdown', sa.Float(), nullable=True),
    sa.Column('volatility', sa.Float(), nullable=True),
    sa.Column('sharpe_ratio', sa.Float(), nullable=True),
    sa.Column('detailed_results', sa.Text(), nullable=True),
    sa.Column('risk_metrics', sa.Text(), nullable=True),
    sa.Column('sector_performance', sa.Text(), nullable=True),
    sa.Column('backtest_status', sa.String(length=20), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['report_id'], ['report.id'], ),
    sa.ForeignKeyConstraint(['scenario_id'], ['market_scenarios.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('scenario_analyst_mapping',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('scenario_id', sa.Integer(), nullable=False),
    sa.Column('report_id', sa.String(length=32), nullable=False),
    sa.Column('analyst', sa.String(length=100), nullable=False),
    sa.Column('relevance_score', sa.Float(), nullable=True),
    sa.Column('risk_profile_match', sa.String(length=50), nullable=True),
    sa.Column('portfolio_impact_analysis', sa.Text(), nullable=True),
    sa.Column('mitigation_strategies', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['report_id'], ['report.id'], ),
    sa.ForeignKeyConstraint(['scenario_id'], ['market_scenarios.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('scenario_reports',
    sa.Column('id', sa.String(length=32), nullable=False),
    sa.Column('report_id', sa.String(length=32), nullable=False),
    sa.Column('analyst', sa.String(length=100), nullable=False),
    sa.Column('scenario_title', sa.String(length=500), nullable=True),
    sa.Column('scenario_type', sa.String(length=50), nullable=True),
    sa.Column('start_date', sa.Date(), nullable=True),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('scenario_description', sa.Text(), nullable=True),
    sa.Column('interest_rate_change', sa.Float(), nullable=True),
    sa.Column('inflation_rate', sa.Float(), nullable=True),
    sa.Column('usd_inr_change', sa.Float(), nullable=True),
    sa.Column('crude_oil_price', sa.Float(), nullable=True),
    sa.Column('gdp_growth_impact', sa.Float(), nullable=True),
    sa.Column('sectoral_sentiment', sa.Text(), nullable=True),
    sa.Column('stock_recommendations', sa.Text(), nullable=True),
    sa.Column('predictive_model', sa.String(length=200), nullable=True),
    sa.Column('analyst_notes', sa.Text(), nullable=True),
    sa.Column('backtest_accuracy', sa.Float(), nullable=True),
    sa.Column('scenario_score', sa.Float(), nullable=True),
    sa.Column('sharpe_ratio', sa.Float(), nullable=True),
    sa.Column('alpha_vs_benchmark', sa.Float(), nullable=True),
    sa.Column('backtested_stocks', sa.Text(), nullable=True),
    sa.Column('additional_stocks', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['report_id'], ['report.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('session_booking_notes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('booking_id', sa.Integer(), nullable=False),
    sa.Column('author_type', sa.String(length=20), nullable=True),
    sa.Column('author_id', sa.String(length=40), nullable=True),
    sa.Column('note', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['booking_id'], ['session_bookings.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('session_booking_notes', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_session_booking_notes_booking_id'), ['booking_id'], unique=False)

    op.create_table('session_feedback',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('booking_id', sa.Integer(), nullable=False),
    sa.Column('investor_id', sa.String(length=32), nullable=False),
    sa.Column('analyst_id', sa.Integer(), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['booking_id'], ['session_bookings.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('booking_id', 'investor_id', name='uq_feedback_once')
    )
    with op.batch_alter_table('session_feedback', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_session_feedback_analyst_id'), ['analyst_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_session_feedback_booking_id'), ['booking_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_session_feedback_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_session_feedback_investor_id'), ['investor_id'], unique=False)

    op.create_table('skill_learning_analysis',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('report_id', sa.String(length=32), nullable=False),
    sa.Column('analysis_type', sa.String(length=50), nullable=False),
    sa.Column('skill_category', sa.String(length=50), nullable=False),
    sa.Column('code_example', sa.Text(), nullable=False),
    sa.Column('explanation', sa.Text(), nullable=False),
    sa.Column('learning_objectives', sa.Text(), nullable=True),
    sa.Column('business_insight', sa.Text(), nullable=True),
    sa.Column('skill_level', sa.String(length=20), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['report_id'], ['report.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('support_ticket_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ticket_id', sa.Integer(), nullable=False),
    sa.Column('from_status', sa.String(length=20), nullable=True),
    sa.Column('to_status', sa.String(length=20), nullable=True),
    sa.Column('note', sa.Text(), nullable=True),
    sa.Column('admin_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['ticket_id'], ['support_tickets.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('support_ticket_history', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_support_ticket_history_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_support_ticket_history_ticket_id'), ['ticket_id'], unique=False)

    op.create_table('model_recommendations',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('published_model_id', sa.String(length=40), nullable=False),
    sa.Column('run_history_id', sa.String(length=60), nullable=True),
    sa.Column('stock_symbol', sa.String(length=20), nullable=False),
    sa.Column('recommendation_type', sa.String(length=20), nullable=False),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('target_price', sa.Float(), nullable=True),
    sa.Column('stop_loss', sa.Float(), nullable=True),
    sa.Column('price_at_recommendation', sa.Float(), nullable=True),
    sa.Column('current_price', sa.Float(), nullable=True),
    sa.Column('last_price_update', sa.DateTime(), nullable=True),
    sa.Column('return_1d', sa.Float(), nullable=True),
    sa.Column('return_1w', sa.Float(), nullable=True),
    sa.Column('return_1m', sa.Float(), nullable=True),
    sa.Column('return_3m', sa.Float(), nullable=True),
    sa.Column('return_6m', sa.Float(), nullable=True),
    sa.Column('return_1y', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('exit_price', sa.Float(), nullable=True),
    sa.Column('exit_date', sa.DateTime(), nullable=True),
    sa.Column('exit_reason', sa.String(length=50), nullable=True),
    sa.Column('sector', sa.String(length=50), nullable=True),
    sa.Column('market_cap', sa.String(length=20), nullable=True),
    sa.Column('additional_data', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['published_model_id'], ['published_models.id'], ),
    sa.ForeignKeyConstraint(['run_history_id'], ['published_model_run_history.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('model_recommendations', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_model_recommendations_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_model_recommendations_published_model_id'), ['published_model_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_model_recommendations_run_history_id'), ['run_history_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_model_recommendations_stock_symbol'), ['stock_symbol'], unique=False)

    op.create_table('options_call_backtests',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('recommendation_id', sa.Integer(), nullable=False),
    sa.Column('test_type', sa.String(length=20), nullable=False),
    sa.Column('horizon_days', sa.Integer(), nullable=False),
    sa.Column('n_scenarios', sa.Integer(), nullable=True),
    sa.Column('slippage', sa.Float(), nullable=True),
    sa.Column('fees', sa.Float(), nullable=True),
    sa.Column('method', sa.String(length=50), nullable=True),
    sa.Column('metrics_json', sa.Text(), nullable=True),
    sa.Column('distribution_json', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['recommendation_id'], ['options_call_recommendations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('options_call_backtests', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_options_call_backtests_recommendation_id'), ['recommendation_id'], unique=False)

    with op.batch_alter_table('admin_account', schema=None) as batch_op:
        batch_op.add_column(sa.Column('name', sa.String(length=200), nullable=False))
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('role', sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column('last_login', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('login_count', sa.Integer(), nullable=True))
        batch_op.alter_column('id',
               existing_type=sa.VARCHAR(length=32),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)

    with op.batch_alter_table('analyst_profile', schema=None) as batch_op:
        batch_op.add_column(sa.Column('phone', sa.String(length=20), nullable=True))
        batch_op.add_column(sa.Column('password_hash', sa.String(length=255), nullable=True))
        batch_op.add_column(sa.Column('analyst_id', sa.String(length=32), nullable=True))
        batch_op.add_column(sa.Column('last_login', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('login_count', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('date_of_birth', sa.Date(), nullable=True))
        batch_op.add_column(sa.Column('brief_description', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('plan', sa.String(length=20), nullable=True))
        batch_op.add_column(sa.Column('daily_usage_date', sa.Date(), nullable=True))
        batch_op.add_column(sa.Column('daily_usage_count', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('plan_notes', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('plan_expires_at', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('daily_llm_prompt_count', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('daily_llm_token_count', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('daily_run_count', sa.Integer(), nullable=True))
        batch_op.create_unique_constraint(None, ['analyst_id'])
        batch_op.create_unique_constraint(None, ['email'])

    with op.batch_alter_table('investor_account', schema=None) as batch_op:
        batch_op.add_column(sa.Column('mobile', sa.String(length=15), nullable=True))
        batch_op.add_column(sa.Column('pan_number', sa.String(length=10), nullable=True))
        batch_op.add_column(sa.Column('pan_verified', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('admin_approved', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('verification_document', sa.String(length=500), nullable=True))
        batch_op.add_column(sa.Column('admin_notes', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('approval_date', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('approved_by', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('plan', sa.String(length=20), nullable=True))
        batch_op.add_column(sa.Column('daily_usage_date', sa.Date(), nullable=True))
        batch_op.add_column(sa.Column('daily_usage_count', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('plan_notes', sa.Text(), nullable=True))

    with op.batch_alter_table('portfolio_commentary', schema=None) as batch_op:
        batch_op.add_column(sa.Column('investor_id', sa.String(length=32), nullable=True))

    with op.batch_alter_table('report', schema=None) as batch_op:
        batch_op.add_column(sa.Column('topic', sa.String(length=500), nullable=True))
        batch_op.add_column(sa.Column('sub_heading', sa.String(length=1000), nullable=True))
        batch_op.add_column(sa.Column('report_type', sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column('skill_learning_analysis', sa.Text(), nullable=True))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('report', schema=None) as batch_op:
        batch_op.drop_column('skill_learning_analysis')
        batch_op.drop_column('report_type')
        batch_op.drop_column('sub_heading')
        batch_op.drop_column('topic')

    with op.batch_alter_table('portfolio_commentary', schema=None) as batch_op:
        batch_op.drop_column('investor_id')

    with op.batch_alter_table('investor_account', schema=None) as batch_op:
        batch_op.drop_column('plan_notes')
        batch_op.drop_column('daily_usage_count')
        batch_op.drop_column('daily_usage_date')
        batch_op.drop_column('plan')
        batch_op.drop_column('approved_by')
        batch_op.drop_column('approval_date')
        batch_op.drop_column('admin_notes')
        batch_op.drop_column('verification_document')
        batch_op.drop_column('admin_approved')
        batch_op.drop_column('pan_verified')
        batch_op.drop_column('pan_number')
        batch_op.drop_column('mobile')

    with op.batch_alter_table('analyst_profile', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_column('daily_run_count')
        batch_op.drop_column('daily_llm_token_count')
        batch_op.drop_column('daily_llm_prompt_count')
        batch_op.drop_column('plan_expires_at')
        batch_op.drop_column('plan_notes')
        batch_op.drop_column('daily_usage_count')
        batch_op.drop_column('daily_usage_date')
        batch_op.drop_column('plan')
        batch_op.drop_column('brief_description')
        batch_op.drop_column('date_of_birth')
        batch_op.drop_column('login_count')
        batch_op.drop_column('last_login')
        batch_op.drop_column('analyst_id')
        batch_op.drop_column('password_hash')
        batch_op.drop_column('phone')

    with op.batch_alter_table('admin_account', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(length=32),
               existing_nullable=False,
               autoincrement=True)
        batch_op.drop_column('login_count')
        batch_op.drop_column('last_login')
        batch_op.drop_column('role')
        batch_op.drop_column('is_active')
        batch_op.drop_column('name')

    with op.batch_alter_table('options_call_backtests', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_options_call_backtests_recommendation_id'))

    op.drop_table('options_call_backtests')
    with op.batch_alter_table('model_recommendations', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_model_recommendations_stock_symbol'))
        batch_op.drop_index(batch_op.f('ix_model_recommendations_run_history_id'))
        batch_op.drop_index(batch_op.f('ix_model_recommendations_published_model_id'))
        batch_op.drop_index(batch_op.f('ix_model_recommendations_created_at'))

    op.drop_table('model_recommendations')
    with op.batch_alter_table('support_ticket_history', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_support_ticket_history_ticket_id'))
        batch_op.drop_index(batch_op.f('ix_support_ticket_history_created_at'))

    op.drop_table('support_ticket_history')
    op.drop_table('skill_learning_analysis')
    with op.batch_alter_table('session_feedback', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_session_feedback_investor_id'))
        batch_op.drop_index(batch_op.f('ix_session_feedback_created_at'))
        batch_op.drop_index(batch_op.f('ix_session_feedback_booking_id'))
        batch_op.drop_index(batch_op.f('ix_session_feedback_analyst_id'))

    op.drop_table('session_feedback')
    with op.batch_alter_table('session_booking_notes', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_session_booking_notes_booking_id'))

    op.drop_table('session_booking_notes')
    op.drop_table('scenario_reports')
    op.drop_table('scenario_analyst_mapping')
    op.drop_table('report_backtesting')
    with op.batch_alter_table('published_model_watchlist', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_published_model_watchlist_published_model_id'))
        batch_op.drop_index(batch_op.f('ix_published_model_watchlist_investor_id'))

    op.drop_table('published_model_watchlist')
    with op.batch_alter_table('published_model_subscriptions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_published_model_subscriptions_published_model_id'))
        batch_op.drop_index(batch_op.f('ix_published_model_subscriptions_investor_id'))

    op.drop_table('published_model_subscriptions')
    with op.batch_alter_table('published_model_run_history', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_published_model_run_history_published_model_id'))
        batch_op.drop_index(batch_op.f('ix_published_model_run_history_investor_id'))
        batch_op.drop_index(batch_op.f('ix_published_model_run_history_created_at'))

    op.drop_table('published_model_run_history')
    with op.batch_alter_table('published_model_change_alerts', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_published_model_change_alerts_published_model_id'))
        batch_op.drop_index(batch_op.f('ix_published_model_change_alerts_investor_id'))

    op.drop_table('published_model_change_alerts')
    with op.batch_alter_table('options_call_recommendations', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_options_call_recommendations_user_key'))

    op.drop_table('options_call_recommendations')
    with op.batch_alter_table('option_chain_snapshots', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_option_chain_snapshots_date'))

    op.drop_table('option_chain_snapshots')
    with op.batch_alter_table('model_performance_metrics', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_model_performance_metrics_published_model_id'))
        batch_op.drop_index(batch_op.f('ix_model_performance_metrics_calculation_date'))

    op.drop_table('model_performance_metrics')
    with op.batch_alter_table('investor_risk_profile', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_investor_risk_profile_investor_id'))

    op.drop_table('investor_risk_profile')
    with op.batch_alter_table('investor_model_profiles', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_investor_model_profiles_published_model_id'))
        batch_op.drop_index(batch_op.f('ix_investor_model_profiles_investor_id'))

    op.drop_table('investor_model_profiles')
    with op.batch_alter_table('investor_imported_portfolio_holdings', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_investor_imported_portfolio_holdings_ticker'))
        batch_op.drop_index(batch_op.f('ix_investor_imported_portfolio_holdings_imported_portfolio_id'))

    op.drop_table('investor_imported_portfolio_holdings')
    with op.batch_alter_table('edit_access_requests', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_edit_access_requests_requester_user_key'))
        batch_op.drop_index(batch_op.f('ix_edit_access_requests_published_model_id'))

    op.drop_table('edit_access_requests')
    with op.batch_alter_table('code_run_requests', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_code_run_requests_requester'))

    op.drop_table('code_run_requests')
    with op.batch_alter_table('code_artifact_stars', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_code_artifact_stars_username'))

    op.drop_table('code_artifact_stars')
    with op.batch_alter_table('code_artifact_permissions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_code_artifact_permissions_username'))

    op.drop_table('code_artifact_permissions')
    with op.batch_alter_table('code_artifact_activity', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_code_artifact_activity_created_at'))
        batch_op.drop_index(batch_op.f('ix_code_artifact_activity_artifact_id'))
        batch_op.drop_index(batch_op.f('ix_code_artifact_activity_actor'))
        batch_op.drop_index(batch_op.f('ix_code_artifact_activity_action'))

    op.drop_table('code_artifact_activity')
    with op.batch_alter_table('chat_messages', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_chat_messages_session_id'))
        batch_op.drop_index(batch_op.f('ix_chat_messages_created_at'))

    op.drop_table('chat_messages')
    op.drop_table('btst_analysis_results')
    with op.batch_alter_table('support_tickets', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_support_tickets_user_id'))
        batch_op.drop_index(batch_op.f('ix_support_tickets_created_at'))

    op.drop_table('support_tickets')
    with op.batch_alter_table('stock_price_history', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_stock_price_history_stock_symbol'))
        batch_op.drop_index(batch_op.f('ix_stock_price_history_date'))

    op.drop_table('stock_price_history')
    op.drop_table('stock_categories')
    op.drop_table('skill_completions')
    with op.batch_alter_table('session_bookings', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_session_bookings_status'))
        batch_op.drop_index(batch_op.f('ix_session_bookings_start_utc'))
        batch_op.drop_index(batch_op.f('ix_session_bookings_investor_id'))
        batch_op.drop_index(batch_op.f('ix_session_bookings_end_utc'))
        batch_op.drop_index(batch_op.f('ix_session_bookings_analyst_id'))

    op.drop_table('session_bookings')
    op.drop_table('script_executions')
    op.drop_table('saved_scripts')
    with op.batch_alter_table('published_models', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_published_models_name'))
        batch_op.drop_index(batch_op.f('ix_published_models_category'))
        batch_op.drop_index(batch_op.f('ix_published_models_author_user_key'))

    op.drop_table('published_models')
    op.drop_table('portfolio_stress_testing')
    op.drop_table('portfolio_analysis_limit')
    op.drop_table('ml_model_results')
    op.drop_table('market_scenarios')
    with op.batch_alter_table('investor_trading_api_connections', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_investor_trading_api_connections_investor_id'))

    op.drop_table('investor_trading_api_connections')
    op.drop_table('investor_registration')
    op.drop_table('investor_portfolio_stock')
    with op.batch_alter_table('investor_imported_portfolios', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_investor_imported_portfolios_investor_id'))
        batch_op.drop_index(batch_op.f('ix_investor_imported_portfolios_import_date'))
        batch_op.drop_index(batch_op.f('ix_investor_imported_portfolios_checksum'))

    op.drop_table('investor_imported_portfolios')
    with op.batch_alter_table('google_calendar_tokens', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_google_calendar_tokens_analyst_id'))

    op.drop_table('google_calendar_tokens')
    with op.batch_alter_table('code_artifacts', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_code_artifacts_author'))

    op.drop_table('code_artifacts')
    with op.batch_alter_table('code_artifact_versions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_code_artifact_versions_checksum'))
        batch_op.drop_index(batch_op.f('ix_code_artifact_versions_artifact_id'))

    op.drop_table('code_artifact_versions')
    with op.batch_alter_table('chat_sessions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_chat_sessions_user_key'))

    op.drop_table('chat_sessions')
    op.drop_table('certificate_templates')
    op.drop_table('certificate_requests')
    with op.batch_alter_table('async_run_history', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_async_run_history_user_key'))
        batch_op.drop_index(batch_op.f('ix_async_run_history_status'))
        batch_op.drop_index(batch_op.f('ix_async_run_history_code_hash'))

    op.drop_table('async_run_history')
    with op.batch_alter_table('analyst_time_off', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_analyst_time_off_date'))
        batch_op.drop_index(batch_op.f('ix_analyst_time_off_analyst_id'))

    op.drop_table('analyst_time_off')
    op.drop_table('analyst_skill_summary')
    with op.batch_alter_table('analyst_connect_profiles', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_analyst_connect_profiles_is_enabled'))
        batch_op.drop_index(batch_op.f('ix_analyst_connect_profiles_analyst_id'))

    op.drop_table('analyst_connect_profiles')
    with op.batch_alter_table('analyst_availability', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_analyst_availability_analyst_id'))

    op.drop_table('analyst_availability')
    # ### end Alembic commands ###
