# AWS CloudFormation Template for Flask Investment Research Application
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Complete AWS infrastructure for Flask Investment Research Application with MLClass Agentic AI'

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair for SSH access
    
  DomainName:
    Type: String
    Description: Domain name for the application (e.g., myapp.com)
    Default: ''
    
  InstanceType:
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
    Description: EC2 instance type
    
  SSHLocation:
    Type: String
    Default: 0.0.0.0/0
    Description: IP address range that can SSH to the EC2 instances
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: FlaskApp-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: FlaskApp-IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: FlaskApp Public Subnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: FlaskApp Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # Security Groups
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: FlaskApp-WebServer-SG
      GroupDescription: Security group for Flask application web server
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS access
        - IpProtocol: tcp
          FromPort: 5008
          ToPort: 5008
          CidrIp: 10.0.0.0/16
          Description: Flask app internal access
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: FlaskApp-WebServer-SG

  # IAM Role for EC2 Instance
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: FlaskAppS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub '${BackupBucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Ref BackupBucket
        - PolicyName: FlaskAppSESAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'
      Tags:
        - Key: Name
          Value: FlaskApp-EC2-Role

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  # S3 Bucket for backups
  BackupBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'flask-investment-app-backups-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldBackups
            Status: Enabled
            ExpirationInDays: 30
            NoncurrentVersionExpirationInDays: 7
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Name
          Value: FlaskApp-Backups

  # Launch Template
  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: FlaskApp-LaunchTemplate
      LaunchTemplateData:
        ImageId: ami-0c02fb55956c7d316  # Ubuntu 22.04 LTS (us-east-1)
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyPairName
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        SecurityGroupIds:
          - !Ref WebServerSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            echo "Starting Flask Investment App deployment at $(date)"
            
            # Update system
            apt-get update -y
            apt-get upgrade -y
            
            # Install basic dependencies
            apt-get install -y python3.11 python3.11-venv python3.11-dev python3-pip
            apt-get install -y nginx supervisor sqlite3 curl wget git awscli
            apt-get install -y build-essential libssl-dev libffi-dev
            apt-get install -y certbot python3-certbot-nginx
            apt-get install -y htop tree unzip jq
            
            # Install CloudWatch agent
            wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
            dpkg -i amazon-cloudwatch-agent.deb
            
            # Create application user and directories
            adduser --system --group --home /opt/flask-app flask-app
            mkdir -p /opt/flask-app/{data,backups,scripts,static,templates}
            mkdir -p /var/log/flask-app
            chown -R flask-app:flask-app /opt/flask-app /var/log/flask-app
            
            # Create deployment ready marker
            touch /tmp/ec2-ready-for-deployment
            
            # Send deployment completion signal
            echo "EC2 instance setup completed at $(date)" > /tmp/deployment-status.log
            
            echo "Flask Investment App EC2 setup completed successfully"
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeType: gp3
              VolumeSize: 20
              DeleteOnTermination: true
              Encrypted: true
        Monitoring:
          Enabled: true
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: FlaskApp-Instance
              - Key: Environment
                Value: Production
              - Key: Application
                Value: Flask-Investment-Research

  # EC2 Instance
  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: !GetAtt EC2LaunchTemplate.LatestVersionNumber
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: Flask-Investment-App-Server

  # Elastic IP
  ElasticIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      InstanceId: !Ref WebServerInstance
      Tags:
        - Key: Name
          Value: FlaskApp-EIP

  # CloudWatch Log Group
  ApplicationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ec2/flask-investment-app
      RetentionInDays: 30

  # CloudWatch Alarms
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: High CPU utilization alarm
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref WebServerInstance
      TreatMissingData: notBreaching

  HighMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: High memory utilization alarm
      MetricName: MemoryUtilization
      Namespace: CWAgent
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 85
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref WebServerInstance
      TreatMissingData: notBreaching

  # Route 53 hosted zone and record (optional)
  # Only created if DomainName is provided
  HostedZone:
    Type: AWS::Route53::HostedZone
    Condition: HasDomainName
    Properties:
      Name: !Ref DomainName
      HostedZoneConfig:
        Comment: !Sub 'Hosted zone for ${DomainName}'

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: HasDomainName
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref DomainName
      Type: A
      TTL: 300
      ResourceRecords:
        - !Ref ElasticIP

  WWWDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: HasDomainName
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub 'www.${DomainName}'
      Type: A
      TTL: 300
      ResourceRecords:
        - !Ref ElasticIP

Conditions:
  HasDomainName: !Not [!Equals [!Ref DomainName, '']]

Outputs:
  InstanceId:
    Description: Instance ID of the web server
    Value: !Ref WebServerInstance
    Export:
      Name: !Sub '${AWS::StackName}-InstanceId'

  PublicIP:
    Description: Public IP address of the web server
    Value: !Ref ElasticIP
    Export:
      Name: !Sub '${AWS::StackName}-PublicIP'

  PublicDNS:
    Description: Public DNS name of the web server
    Value: !GetAtt WebServerInstance.PublicDnsName
    Export:
      Name: !Sub '${AWS::StackName}-PublicDNS'

  WebsiteURL:
    Description: URL of the Flask application
    Value: !Sub 'http://${ElasticIP}'
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteURL'

  SecureWebsiteURL:
    Description: HTTPS URL of the Flask application (after SSL setup)
    Value: !If
      - HasDomainName
      - !Sub 'https://${DomainName}'
      - !Sub 'https://${ElasticIP}'
    Export:
      Name: !Sub '${AWS::StackName}-SecureWebsiteURL'

  SSHCommand:
    Description: SSH command to connect to the instance
    Value: !Sub 'ssh -i ${KeyPairName}.pem ubuntu@${ElasticIP}'
    Export:
      Name: !Sub '${AWS::StackName}-SSHCommand'

  BackupBucketName:
    Description: Name of the S3 bucket for backups
    Value: !Ref BackupBucket
    Export:
      Name: !Sub '${AWS::StackName}-BackupBucket'

  SecurityGroupId:
    Description: Security Group ID for the web server
    Value: !Ref WebServerSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupId'

  VPCId:
    Description: VPC ID where the instance is deployed
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCId'

  SubnetId:
    Description: Subnet ID where the instance is deployed
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub '${AWS::StackName}-SubnetId'